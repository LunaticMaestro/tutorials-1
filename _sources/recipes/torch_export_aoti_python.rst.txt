
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


.. meta::
   :description: An end-to-end example of how to use AOTInductor for Python runtime.
   :keywords: torch.export, AOTInductor, torch._inductor.aot_compile, torch._export.aot_load

``torch.export`` AOTInductor Tutorial for Python runtime (Beta)
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for Python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 44-50

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 52-66

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 66-106

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     85%|########4 | 37.9M/44.7M [00:00<00:00, 396MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 393MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0460 ms 100.0%
      triton_convolution_0 0.1041 ms 44.2%
      triton_convolution_4 0.1065 ms 43.2%
      triton_convolution_3 0.1277 ms 36.0%
      triton_convolution_1 0.1405 ms 32.8%
      triton_convolution_5 0.1865 ms 24.7%
      triton_convolution_2 0.2191 ms 21.0%
    SingleProcess AUTOTUNE benchmarking takes 0.8024 seconds and 0.0088 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0446 ms 100.0%
      triton_convolution_6 0.0737 ms 60.5%
      triton_convolution_9 0.0746 ms 59.8%
      triton_convolution_12 0.0773 ms 57.7%
      triton_convolution_11 0.0849 ms 52.6%
      triton_convolution_10 0.0849 ms 52.6%
      triton_convolution_7 0.1389 ms 32.1%
      triton_convolution_8 0.1418 ms 31.5%
    SingleProcess AUTOTUNE benchmarking takes 0.9675 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0342 ms 100.0%
      triton_convolution_38 0.0626 ms 54.7%
      triton_convolution_40 0.0821 ms 41.7%
      triton_convolution_34 0.0859 ms 39.8%
      triton_convolution_39 0.0913 ms 37.5%
      triton_convolution_37 0.1067 ms 32.1%
      triton_convolution_35 0.1583 ms 21.6%
      triton_convolution_36 0.3052 ms 11.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9811 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0110 ms 100.0%
      triton_convolution_53 0.0120 ms 91.5%
      convolution 0.0129 ms 85.6%
      triton_convolution_48 0.0131 ms 83.9%
      triton_convolution_54 0.0149 ms 73.8%
      triton_convolution_51 0.0155 ms 71.1%
      triton_convolution_50 0.0457 ms 24.1%
      triton_convolution_49 0.0742 ms 14.8%
    SingleProcess AUTOTUNE benchmarking takes 0.9783 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0434 ms 100.0%
      triton_convolution_59 0.1169 ms 37.1%
      triton_convolution_61 0.1359 ms 31.9%
      triton_convolution_55 0.1648 ms 26.3%
      triton_convolution_60 0.1735 ms 25.0%
      triton_convolution_56 0.1899 ms 22.9%
      triton_convolution_58 0.1947 ms 22.3%
      triton_convolution_57 0.2673 ms 16.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9650 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0371 ms 100.0%
      triton_convolution_73 0.0999 ms 37.1%
      triton_convolution_75 0.1592 ms 23.3%
      triton_convolution_72 0.2029 ms 18.3%
      triton_convolution_70 0.2288 ms 16.2%
      triton_convolution_71 0.2653 ms 14.0%
      triton_convolution_74 0.2845 ms 13.0%
      triton_convolution_69 0.3382 ms 11.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9724 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0123 ms 100.0%
      convolution 0.0201 ms 61.2%
      triton_convolution_88 0.0214 ms 57.4%
      triton_convolution_89 0.0284 ms 43.3%
      triton_convolution_85 0.0332 ms 37.1%
      triton_convolution_86 0.0461 ms 26.7%
      triton_convolution_83 0.1293 ms 9.5%
      triton_convolution_84 0.1513 ms 8.1%
    SingleProcess AUTOTUNE benchmarking takes 1.0200 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0536 ms 100.0%
      triton_convolution_94 0.1859 ms 28.8%
      triton_convolution_92 0.2600 ms 20.6%
      triton_convolution_96 0.2624 ms 20.4%
      triton_convolution_91 0.3721 ms 14.4%
      triton_convolution_93 0.3748 ms 14.3%
      triton_convolution_95 0.5472 ms 9.8%
      triton_convolution_90 0.6539 ms 8.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9512 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0530 ms 100.0%
      triton_convolution_108 0.1925 ms 27.5%
      triton_convolution_106 0.2806 ms 18.9%
      triton_convolution_110 0.2940 ms 18.0%
      triton_convolution_105 0.3829 ms 13.8%
      triton_convolution_107 0.3894 ms 13.6%
      triton_convolution_109 0.5596 ms 9.5%
      triton_convolution_104 0.6870 ms 7.7%
    SingleProcess AUTOTUNE benchmarking takes 0.9547 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0180 ms 100.0%
      convolution 0.0255 ms 70.5%
      triton_convolution_120 0.0335 ms 53.6%
      triton_convolution_124 0.0910 ms 19.7%
      triton_convolution_123 0.0949 ms 18.9%
      triton_convolution_121 0.1293 ms 13.9%
      triton_convolution_118 0.2839 ms 6.3%
      triton_convolution_119 0.2891 ms 6.2%
    SingleProcess AUTOTUNE benchmarking takes 1.0217 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0860 ms 100.0%
      triton_convolution_127 0.2791 ms 30.8%
      triton_convolution_129 0.3608 ms 23.8%
      triton_convolution_131 0.4239 ms 20.3%
      triton_convolution_126 0.4851 ms 17.7%
      triton_convolution_128 0.7238 ms 11.9%
      triton_convolution_130 1.0989 ms 7.8%
      triton_convolution_125 1.4546 ms 5.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9567 seconds and 0.0005 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0158 ms 100.0%
      triton_mm_142 0.0219 ms 72.2%
      triton_mm_152 0.0301 ms 52.4%
      triton_mm_153 0.0306 ms 51.5%
      triton_mm_141 0.0307 ms 51.4%
      triton_mm_146 0.0308 ms 51.2%
      triton_mm_139 0.0343 ms 45.9%
      triton_mm_145 0.0376 ms 41.9%
      triton_mm_144 0.0453 ms 34.8%
      triton_mm_148 0.0497 ms 31.7%
    SingleProcess AUTOTUNE benchmarking takes 1.8313 seconds and 0.0009 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 133-154

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 154-183

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 184-185

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.86 ms




.. GENERATED FROM PYTHON SOURCE LINES 197-198

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 7043.29 ms




.. GENERATED FROM PYTHON SOURCE LINES 212-214

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 216-225

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.224 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
