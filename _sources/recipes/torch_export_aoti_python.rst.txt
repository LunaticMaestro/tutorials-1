
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/torch_export_aoti_python.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_torch_export_aoti_python.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_torch_export_aoti_python.py:


.. meta::
   :description: An end-to-end example of how to use AOTInductor for Python runtime.
   :keywords: torch.export, AOTInductor, torch._inductor.aot_compile, torch._export.aot_load

``torch.export`` AOTInductor Tutorial for Python runtime (Beta)
===============================================================
**Author:** Ankith Gunapal, Bin Bao, Angela Yi

.. GENERATED FROM PYTHON SOURCE LINES 14-34

.. warning::

    ``torch._inductor.aot_compile`` and ``torch._export.aot_load`` are in Beta status and are subject to backwards compatibility
    breaking changes. This tutorial provides an example of how to use these APIs for model deployment using Python runtime.

It has been shown `previously <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`__ how AOTInductor can be used 
to do Ahead-of-Time compilation of PyTorch exported models by creating
a shared library that can be run in a non-Python environment.


In this tutorial, you will learn an end-to-end example of how to use AOTInductor for Python runtime.
We will look at how  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a 
shared library. Additionally, we will examine how to execute the shared library in Python runtime using :func:`torch._export.aot_load`.
You will learn about the speed up seen in the first inference time using AOTInductor, especially when using 
``max-autotune`` mode which can take some time to execute.

**Contents**

.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 37-42

Prerequisites
-------------
* PyTorch 2.4 or later
* Basic understanding of ``torch.export`` and AOTInductor
* Complete the `AOTInductor: Ahead-Of-Time Compilation for Torch.Export-ed Models <https://pytorch.org/docs/stable/torch.compiler_aot_inductor.html#>`_ tutorial

.. GENERATED FROM PYTHON SOURCE LINES 44-50

What you will learn
----------------------
* How to use AOTInductor for python runtime.
* How  to use :func:`torch._inductor.aot_compile` along with :func:`torch.export.export` to generate a shared library
* How to run a shared library in Python runtime using :func:`torch._export.aot_load`.
* When do you use AOTInductor for python runtime

.. GENERATED FROM PYTHON SOURCE LINES 52-66

Model Compilation
-----------------

We will use the TorchVision pretrained `ResNet18` model and TorchInductor on the 
exported PyTorch program using :func:`torch._inductor.aot_compile`.

.. note::

      This API also supports :func:`torch.compile` options like ``mode``
      This means that if used on a CUDA enabled device, you can, for example, set ``"max_autotune": True``
      which leverages Triton based matrix multiplications & convolutions, and enables CUDA graphs by default.

We also specify ``dynamic_shapes`` for the batch dimension. In this example, ``min=2`` is not a bug and is 
explained in `The 0/1 Specialization Problem <https://docs.google.com/document/d/16VPOa3d-Liikf48teAOmxLc92rgvJdfosIy-yoT38Io/edit?fbclid=IwAR3HNwmmexcitV0pbZm_x1a4ykdXZ9th_eJWK-3hBtVgKnrkmemz6Pm5jRQ#heading=h.ez923tomjvyk>`__

.. GENERATED FROM PYTHON SOURCE LINES 66-106

.. code-block:: default



    import os
    import torch
    from torchvision.models import ResNet18_Weights, resnet18

    model = resnet18(weights=ResNet18_Weights.DEFAULT)
    model.eval()

    with torch.inference_mode():

        # Specify the generated shared library path
        aot_compile_options = {
                "aot_inductor.output_path": os.path.join(os.getcwd(), "resnet18_pt2.so"),
        }
        if torch.cuda.is_available():
            device = "cuda"
            aot_compile_options.update({"max_autotune": True})
        else:
            device = "cpu"

        model = model.to(device=device)
        example_inputs = (torch.randn(2, 3, 224, 224, device=device),)

        # min=2 is not a bug and is explained in the 0/1 Specialization Problem
        batch_dim = torch.export.Dim("batch", min=2, max=32)
        exported_program = torch.export.export(
            model,
            example_inputs,
            # Specify the first dimension of the input x as dynamic
            dynamic_shapes={"x": {0: batch_dim}},
        )
        so_path = torch._inductor.aot_compile(
            exported_program.module(),
            example_inputs,
            # Specify the generated shared library path
            options=aot_compile_options
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/ci-user/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     93%|#########3| 41.6M/44.7M [00:00<00:00, 436MB/s]    100%|##########| 44.7M/44.7M [00:00<00:00, 422MB/s]
    AUTOTUNE convolution(2x3x224x224, 64x3x7x7)
      convolution 0.0460 ms 100.0%
      triton_convolution_0 0.1037 ms 44.3%
      triton_convolution_4 0.1064 ms 43.2%
      triton_convolution_3 0.1273 ms 36.1%
      triton_convolution_1 0.1402 ms 32.8%
      triton_convolution_5 0.1864 ms 24.7%
      triton_convolution_2 0.2193 ms 21.0%
    SingleProcess AUTOTUNE benchmarking takes 0.7804 seconds and 0.0112 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 64x64x3x3)
      convolution 0.0440 ms 100.0%
      triton_convolution_6 0.0738 ms 59.6%
      triton_convolution_9 0.0741 ms 59.3%
      triton_convolution_12 0.0770 ms 57.1%
      triton_convolution_11 0.0844 ms 52.1%
      triton_convolution_10 0.0846 ms 52.0%
      triton_convolution_7 0.1357 ms 32.4%
      triton_convolution_8 0.1417 ms 31.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9684 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x3x3)
      convolution 0.0338 ms 100.0%
      triton_convolution_38 0.0618 ms 54.6%
      triton_convolution_40 0.0819 ms 41.2%
      triton_convolution_34 0.0862 ms 39.2%
      triton_convolution_39 0.0914 ms 36.9%
      triton_convolution_37 0.1065 ms 31.7%
      triton_convolution_35 0.1446 ms 23.4%
      triton_convolution_36 0.3051 ms 11.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9790 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x64x56x56, 128x64x1x1)
      triton_convolution_52 0.0110 ms 100.0%
      triton_convolution_53 0.0120 ms 92.0%
      convolution 0.0127 ms 86.6%
      triton_convolution_48 0.0129 ms 85.4%
      triton_convolution_51 0.0152 ms 72.3%
      triton_convolution_54 0.0152 ms 72.3%
      triton_convolution_50 0.0457 ms 24.1%
      triton_convolution_49 0.0639 ms 17.2%
    SingleProcess AUTOTUNE benchmarking takes 0.9780 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 128x128x3x3)
      convolution 0.0428 ms 100.0%
      triton_convolution_59 0.1166 ms 36.7%
      triton_convolution_61 0.1359 ms 31.5%
      triton_convolution_55 0.1646 ms 26.0%
      triton_convolution_60 0.1754 ms 24.4%
      triton_convolution_56 0.1897 ms 22.6%
      triton_convolution_58 0.1941 ms 22.1%
      triton_convolution_57 0.2668 ms 16.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9616 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x3x3)
      convolution 0.0371 ms 100.0%
      triton_convolution_73 0.0995 ms 37.3%
      triton_convolution_75 0.1590 ms 23.3%
      triton_convolution_72 0.2021 ms 18.4%
      triton_convolution_70 0.2150 ms 17.3%
      triton_convolution_71 0.2652 ms 14.0%
      triton_convolution_74 0.2843 ms 13.1%
      triton_convolution_69 0.3381 ms 11.0%
    SingleProcess AUTOTUNE benchmarking takes 0.9720 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x128x28x28, 256x128x1x1)
      triton_convolution_87 0.0121 ms 100.0%
      convolution 0.0197 ms 61.2%
      triton_convolution_88 0.0214 ms 56.3%
      triton_convolution_89 0.0222 ms 54.3%
      triton_convolution_85 0.0326 ms 37.0%
      triton_convolution_86 0.0341 ms 35.4%
      triton_convolution_83 0.1136 ms 10.6%
      triton_convolution_84 0.1336 ms 9.0%
    SingleProcess AUTOTUNE benchmarking takes 1.0113 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 256x256x3x3)
      convolution 0.0526 ms 100.0%
      triton_convolution_94 0.1857 ms 28.3%
      triton_convolution_92 0.2599 ms 20.2%
      triton_convolution_96 0.2626 ms 20.0%
      triton_convolution_91 0.3718 ms 14.2%
      triton_convolution_93 0.3740 ms 14.1%
      triton_convolution_95 0.5473 ms 9.6%
      triton_convolution_90 0.6532 ms 8.1%
    SingleProcess AUTOTUNE benchmarking takes 0.9521 seconds and 0.0006 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x3x3)
      convolution 0.0528 ms 100.0%
      triton_convolution_108 0.1916 ms 27.6%
      triton_convolution_106 0.2808 ms 18.8%
      triton_convolution_110 0.2930 ms 18.0%
      triton_convolution_105 0.3818 ms 13.8%
      triton_convolution_107 0.3894 ms 13.6%
      triton_convolution_109 0.5593 ms 9.4%
      triton_convolution_104 0.6851 ms 7.7%
    SingleProcess AUTOTUNE benchmarking takes 0.9570 seconds and 0.0004 seconds precompiling
    AUTOTUNE convolution(2x256x14x14, 512x256x1x1)
      triton_convolution_122 0.0177 ms 100.0%
      convolution 0.0253 ms 70.0%
      triton_convolution_120 0.0329 ms 53.7%
      triton_convolution_124 0.0793 ms 22.3%
      triton_convolution_123 0.0843 ms 21.0%
      triton_convolution_121 0.1228 ms 14.4%
      triton_convolution_118 0.2648 ms 6.7%
      triton_convolution_119 0.2784 ms 6.4%
    SingleProcess AUTOTUNE benchmarking takes 1.0111 seconds and 0.0005 seconds precompiling
    AUTOTUNE convolution(2x512x7x7, 512x512x3x3)
      convolution 0.0856 ms 100.0%
      triton_convolution_127 0.2815 ms 30.4%
      triton_convolution_129 0.3604 ms 23.8%
      triton_convolution_131 0.4245 ms 20.2%
      triton_convolution_126 0.4836 ms 17.7%
      triton_convolution_128 0.7226 ms 11.9%
      triton_convolution_130 1.0995 ms 7.8%
      triton_convolution_125 1.4543 ms 5.9%
    SingleProcess AUTOTUNE benchmarking takes 0.9555 seconds and 0.0004 seconds precompiling
    AUTOTUNE addmm(2x1000, 2x512, 512x1000)
      addmm 0.0154 ms 100.0%
      triton_mm_142 0.0217 ms 71.0%
      triton_mm_153 0.0301 ms 51.2%
      triton_mm_152 0.0302 ms 50.9%
      triton_mm_141 0.0305 ms 50.5%
      triton_mm_146 0.0309 ms 49.8%
      triton_mm_139 0.0342 ms 45.0%
      triton_mm_145 0.0369 ms 41.7%
      triton_mm_144 0.0455 ms 33.8%
      triton_mm_148 0.0496 ms 31.0%
    SingleProcess AUTOTUNE benchmarking takes 1.8310 seconds and 0.0010 seconds precompiling




.. GENERATED FROM PYTHON SOURCE LINES 107-118

Model Inference in Python
-------------------------

Typically, the shared object generated above is used in a non-Python environment. In PyTorch 2.3, 
we added a new API called :func:`torch._export.aot_load` to load the shared library in the Python runtime.
The API follows a structure similar to the :func:`torch.jit.load` API . You need to specify the path 
of the shared library and the device where it should be loaded.

.. note::
     In the example above, we specified ``batch_size=1`` for inference and  it still functions correctly even though we specified ``min=2`` in 
     :func:`torch.export.export`.

.. GENERATED FROM PYTHON SOURCE LINES 118-132

.. code-block:: default



    import os
    import torch

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model_so_path = os.path.join(os.getcwd(), "resnet18_pt2.so")

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        output = model(example_inputs)








.. GENERATED FROM PYTHON SOURCE LINES 133-154

When to use AOTInductor for Python Runtime
------------------------------------------

One of the requirements for using AOTInductor is that the model shouldn't have any graph breaks.
Once this requirement is met, the primary use case for using AOTInductor Python Runtime is for
model deployment using Python.
There are mainly two reasons why you would use AOTInductor Python Runtime:

-  ``torch._inductor.aot_compile`` generates a shared library. This is useful for model
   versioning for deployments and tracking model performance over time.
-  With :func:`torch.compile` being a JIT compiler, there is a warmup
   cost associated with the first compilation. Your deployment needs to account for the
   compilation time taken for the first inference. With AOTInductor, the compilation is
   done offline using ``torch.export.export`` & ``torch._indutor.aot_compile``. The deployment
   would only load the shared library using ``torch._export.aot_load`` and run inference.


The section below shows the speedup achieved with AOTInductor for first inference

We define a utility function ``timed`` to measure the time taken for inference


.. GENERATED FROM PYTHON SOURCE LINES 154-183

.. code-block:: default


    import time
    def timed(fn):
        # Returns the result of running `fn()` and the time it took for `fn()` to run,
        # in seconds. We use CUDA events and synchronization for accurate
        # measurement on CUDA enabled devices.
        if torch.cuda.is_available():
            start = torch.cuda.Event(enable_timing=True)
            end = torch.cuda.Event(enable_timing=True)
            start.record()
        else:
            start = time.time()

        result = fn()
        if torch.cuda.is_available():
            end.record()
            torch.cuda.synchronize()
        else:
            end = time.time()

        # Measure time taken to execute the function in miliseconds
        if torch.cuda.is_available():
            duration = start.elapsed_time(end)
        else:
            duration = (end - start) * 1000

        return result, duration









.. GENERATED FROM PYTHON SOURCE LINES 184-185

Lets measure the time for first inference using AOTInductor

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    torch._dynamo.reset()

    model = torch._export.aot_load(model_so_path, device)
    example_inputs = (torch.randn(1, 3, 224, 224, device=device),)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for AOTInductor is {time_taken:.2f} ms")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for AOTInductor is 2.90 ms




.. GENERATED FROM PYTHON SOURCE LINES 197-198

Lets measure the time for first inference using ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 198-211

.. code-block:: default


    torch._dynamo.reset()

    model = resnet18(weights=ResNet18_Weights.DEFAULT).to(device)
    model.eval()

    model = torch.compile(model)
    example_inputs = torch.randn(1, 3, 224, 224, device=device)

    with torch.inference_mode():
        _, time_taken = timed(lambda: model(example_inputs))
        print(f"Time taken for first inference for torch.compile is {time_taken:.2f} ms")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time taken for first inference for torch.compile is 7032.06 ms




.. GENERATED FROM PYTHON SOURCE LINES 212-214

We see that there is a drastic speedup in first inference time using AOTInductor compared
to ``torch.compile``

.. GENERATED FROM PYTHON SOURCE LINES 216-225

Conclusion
----------

In this recipe, we have learned how to effectively use the AOTInductor for Python runtime by 
compiling and loading a pretrained ``ResNet18`` model using the ``torch._inductor.aot_compile``
and ``torch._export.aot_load`` APIs. This process demonstrates the practical application of 
generating a shared library and running it within a Python environment, even with dynamic shape
considerations and device-specific optimizations. We also looked at the advantage of using 
AOTInductor in model deployments, with regards to speed up in first inference time.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.139 seconds)


.. _sphx_glr_download_recipes_torch_export_aoti_python.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torch_export_aoti_python.py <torch_export_aoti_python.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torch_export_aoti_python.ipynb <torch_export_aoti_python.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
